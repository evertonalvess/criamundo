// Dados da hist√≥ria de exemplo
const storyData = {
    title: "O Drag√£o Estelar e a Fada Azul",
    paragraphs: [
        "Era uma vez um drag√£o brilhante chamado Draco, que morava numa estrela cadente no c√©u. Seu lar era feito de poeira c√≥smica e luz colorida, e ele adorava voar entre os planetas brincando de esconde-esconde com os cometas.",
        
        "Um dia, enquanto voava perto de Saturno, Draco encontrou uma fada azul chamada Luma. Ela carregava uma varinha feita de gelo lunar e tinha asas que brilhavam como diamantes. Luma estava procurando um lugar para plantar estrelas novas.",
        
        "Draco e Luma se tornaram grandes amigos. Juntos, eles criaram constela√ß√µes no c√©u noturno desenhando com poeira de estrelas. Cada desenho virava uma hist√≥ria para as crian√ßas da Terra.",
        
        "Mas um dia, uma nuvem escura cobriu parte do espa√ßo, escondendo a luz das constela√ß√µes. As crian√ßas ficaram tristes sem ver as formas no c√©u.",
        
        "Ent√£o, Draco soprou seu fogo estelar bem alto, e Luma girou sua varinha. A luz voltou, mais forte do que antes, e o c√©u ficou cheio de novas formas brilhantes!",
        
        "Desde ent√£o, toda noite, Draco e Luma criam novas hist√≥rias no c√©u, para quem quiser sonhar olhando para as estrelas."
    ]
};

// Sistema de navega√ß√£o entre telas
class ScreenManager {
    constructor() {
        this.screens = {
            home: document.getElementById('home-screen'),
            voiceCapture: document.getElementById('voice-capture-screen'),
            aiConfig: document.getElementById('ai-config-screen'),
            loading: document.getElementById('loading-screen'),
            story: document.getElementById('story-screen'),
            saveShare: document.getElementById('save-share-screen')
        };
        this.currentScreen = 'home';
        this.aiManager = null;
        this.voiceManager = null;
        this.currentStory = null;
        this.isPlaying = false;
        this.init();
    }

    async init() {
        this.setupEventListeners();
        this.loadStory();
        this.initManagers();
    }

    async initManagers() {
        // Inicializar AI Manager
        this.aiManager = new AIManager();
        
        // Inicializar Voice Manager
        this.voiceManager = new VoiceManager();
        
        // Configurar callbacks do Voice Manager
        this.voiceManager.onResult((text) => {
            this.handleVoiceResult(text);
        });
        
        this.voiceManager.onError((error) => {
            this.handleVoiceError(error);
        });
        
        this.voiceManager.onStart(() => {
            this.handleVoiceStart();
        });
        
        this.voiceManager.onEnd(() => {
            this.handleVoiceEnd();
        });
    }

    setupEventListeners() {
        // Event listeners para bot√µes do menu principal
        document.getElementById('voiceStoryBtn').addEventListener('click', () => {
            this.showVoiceCaptureScreen();
        });

        document.getElementById('aiStoryBtn').addEventListener('click', () => {
            this.showAICreationScreen();
        });

        document.getElementById('exampleStoryBtn').addEventListener('click', () => {
            this.showMainMenu();
        });

        // Event listeners para bot√µes da tela de hist√≥ria
        document.getElementById('listenBtn').addEventListener('click', () => {
            this.toggleAudio();
        });

        document.getElementById('shareBtn').addEventListener('click', () => {
            this.showMainMenu();
        });

        document.getElementById('printBtn').addEventListener('click', () => {
            this.printStory();
        });

        document.getElementById('newStoryBtn').addEventListener('click', () => {
            this.showMainMenu();
        });

        // Event listeners para bot√µes da tela de compartilhamento
        document.getElementById('saveBtn').addEventListener('click', () => {
            this.saveStory();
        });

        document.getElementById('backToMenuBtn').addEventListener('click', () => {
            this.showMainMenu();
        });

        // Event listeners para bot√µes da tela de IA
        document.getElementById('generateStoryBtn').addEventListener('click', () => {
            this.generateStory();
        });

        document.getElementById('backFromAIBtn').addEventListener('click', () => {
            this.showMainMenu();
        });
    }

    showVoiceCaptureScreen() {
        this.currentScreen = 'voiceCapture';
        this.updateScreen();
        
        // Iniciar narra√ß√£o autom√°tica das instru√ß√µes
        this.speakInstructions();
        
        // Configurar elementos da interface
        this.setupVoiceInterface();
    }

    speakInstructions() {
        const instructionText = document.getElementById('instructionText');
        if (instructionText && 'speechSynthesis' in window) {
            const text = instructionText.innerText;
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'pt-BR';
            utterance.rate = 0.8;
            utterance.pitch = 1.2;
            
            // Usar voz feminina se dispon√≠vel
            const voices = speechSynthesis.getVoices();
            const femaleVoice = voices.find(voice => 
                voice.lang.includes('pt') && voice.name.includes('female')
            );
            if (femaleVoice) {
                utterance.voice = femaleVoice;
            }
            
            this.currentSpeech = utterance;
            speechSynthesis.speak(utterance);
        }
    }

    toggleAudio() {
        if (this.isPlaying) {
            this.stopAudio();
        } else {
            this.playStoryAudio();
        }
    }

    playStoryAudio() {
        if (!this.currentStory) {
            this.showMessage('Nenhuma hist√≥ria carregada');
            return;
        }

        if ('speechSynthesis' in window) {
            // Parar qualquer √°udio anterior
            speechSynthesis.cancel();
            
            const story = this.currentStory;
            const fullText = story.paragraphs.map(p => 
                typeof p === 'string' ? p : p.text
            ).join('. ');
            
            const utterance = new SpeechSynthesisUtterance(fullText);
            utterance.lang = 'pt-BR';
            utterance.rate = 0.8;
            utterance.pitch = 1.1;
            
            // Usar voz feminina se dispon√≠vel
            const voices = speechSynthesis.getVoices();
            const femaleVoice = voices.find(voice => 
                voice.lang.includes('pt') && voice.name.includes('female')
            );
            if (femaleVoice) {
                utterance.voice = femaleVoice;
            }
            
            utterance.onstart = () => {
                this.isPlaying = true;
                document.getElementById('listenBtn').innerHTML = '‚è∏Ô∏è Pausar';
            };
            
            utterance.onend = () => {
                this.isPlaying = false;
                document.getElementById('listenBtn').innerHTML = 'üîä Ouvir Hist√≥ria';
            };
            
            utterance.onerror = () => {
                this.isPlaying = false;
                document.getElementById('listenBtn').innerHTML = 'üîä Ouvir Hist√≥ria';
                this.showMessage('Erro ao reproduzir √°udio');
            };
            
            speechSynthesis.speak(utterance);
        } else {
            this.showMessage('S√≠ntese de voz n√£o dispon√≠vel neste navegador');
        }
    }

    stopAudio() {
        if ('speechSynthesis' in window) {
            speechSynthesis.cancel();
        }
        this.isPlaying = false;
        document.getElementById('listenBtn').innerHTML = 'üîä Ouvir Hist√≥ria';
    }

    toggleInstructions() {
        const pauseBtn = document.getElementById('pauseBtn');
        if (speechSynthesis.speaking) {
            speechSynthesis.pause();
            pauseBtn.innerHTML = '‚ñ∂Ô∏è Continuar';
        } else {
            speechSynthesis.resume();
            pauseBtn.innerHTML = '‚è∏Ô∏è Pausar';
        }
    }

    setupVoiceInterface() {
        this.capturedText = '';
        this.isRecording = false;
        
        // Atualizar interface inicial
        document.getElementById('voiceStatus').innerHTML = '<p>Aguardando voc√™ falar...</p>';
        document.getElementById('capturedText').innerHTML = '<p>Clique em "Come√ßar a Gravar" e conte sua hist√≥ria! üé§</p>';
        
        // Mostrar apenas o bot√£o de come√ßar
        document.getElementById('startVoiceBtn').style.display = 'inline-block';
        document.getElementById('stopVoiceBtn').style.display = 'none';
        document.getElementById('playThemeBtn').style.display = 'none';
        document.getElementById('createStoryBtn').style.display = 'none';
    }

    startVoiceCapture() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            this.showMessage('Reconhecimento de voz n√£o dispon√≠vel neste navegador');
            return;
        }

        this.isRecording = true;
        this.capturedText = '';
        
        // Atualizar interface
        document.getElementById('startVoiceBtn').style.display = 'none';
        document.getElementById('stopVoiceBtn').style.display = 'inline-block';
        document.getElementById('voiceStatus').innerHTML = '<p>üé§ Gravando... Fale agora!</p>';
        document.getElementById('micAnimation').classList.add('recording');
        document.getElementById('capturedText').innerHTML = '<p>Ouvindo voc√™...</p>';
        
        // Configurar reconhecimento de voz
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        this.recognition.lang = 'pt-BR';
        this.recognition.continuous = true;
        this.recognition.interimResults = true;
        
        this.recognition.onstart = () => {
            console.log('Reconhecimento de voz iniciado');
        };
        
        this.recognition.onresult = (event) => {
            let interimTranscript = '';
            let finalTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const transcript = event.results[i][0].transcript;
                if (event.results[i].isFinal) {
                    finalTranscript += transcript;
                } else {
                    interimTranscript += transcript;
                }
            }
            
            this.capturedText += finalTranscript;
            
            // Atualizar interface em tempo real
            const displayText = this.capturedText + interimTranscript;
            document.getElementById('capturedText').innerHTML = 
                `<p>${displayText || 'Falando...'}</p>`;
        };
        
        this.recognition.onerror = (event) => {
            console.error('Erro no reconhecimento de voz:', event.error);
            this.stopVoiceCapture();
        };
        
        this.recognition.onend = () => {
            if (this.isRecording) {
                // Reiniciar se ainda estiver gravando
                this.recognition.start();
            }
        };
        
        this.recognition.start();
    }

    stopVoiceCapture() {
        this.isRecording = false;
        
        if (this.recognition) {
            this.recognition.stop();
        }
        
        // Atualizar interface
        document.getElementById('startVoiceBtn').style.display = 'inline-block';
        document.getElementById('stopVoiceBtn').style.display = 'none';
        document.getElementById('micAnimation').classList.remove('recording');
        
        if (this.capturedText.trim()) {
            document.getElementById('voiceStatus').innerHTML = '<p>‚úÖ Hist√≥ria capturada!</p>';
            document.getElementById('playThemeBtn').style.display = 'inline-block';
            document.getElementById('createStoryBtn').style.display = 'inline-block';
        } else {
            document.getElementById('voiceStatus').innerHTML = '<p>N√£o consegui ouvir nada. Tente novamente!</p>';
            document.getElementById('capturedText').innerHTML = '<p>Clique em "Come√ßar a Gravar" e conte sua hist√≥ria! üé§</p>';
        }
    }

    playCapturedTheme() {
        if (this.capturedText && 'speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(this.capturedText);
            utterance.lang = 'pt-BR';
            utterance.rate = 0.8;
            
            const voices = speechSynthesis.getVoices();
            const femaleVoice = voices.find(voice => 
                voice.lang.includes('pt') && voice.name.includes('female')
            );
            if (femaleVoice) {
                utterance.voice = femaleVoice;
            }
            
            speechSynthesis.speak(utterance);
        }
    }

    createStoryFromVoice() {
        if (!this.capturedText.trim()) {
            this.showMessage('Primeiro capture sua hist√≥ria com a voz!');
            return;
        }
        
        // Mostrar tela de cria√ß√£o com IA
        this.showAICreationScreen();
        
        // Simular processamento da IA com o texto capturado
        setTimeout(() => {
            this.processVoiceInput(this.capturedText);
        }, 1000);
    }

    processVoiceInput(voiceText) {
        // Mostrar tela de carregamento
        this.showMessage('Criando sua hist√≥ria m√°gica com IA... ‚ú®');
        
        // Gerar hist√≥ria com IA usando o texto de voz
        this.aiManager.generateStory({ voiceText: voiceText })
            .then(story => {
                this.currentStory = story;
                this.showStoryScreen();
                this.showMessage('Hist√≥ria criada com sucesso! üéâ');
            })
            .catch(error => {
                console.error('Erro ao gerar hist√≥ria:', error);
                this.showMessage('Usando hist√≥ria de exemplo... üìñ');
                this.currentStory = this.getFallbackStory();
                this.showStoryScreen();
            });
    }

    extractThemes(text) {
        const themeKeywords = {
            'amizade': ['amigo', 'amiga', 'amizade', 'juntos', 'ajudar'],
            'coragem': ['coragem', 'bravo', 'valente', 'medo', 'superar'],
            'aventura': ['aventura', 'explorar', 'descoberta', 'viagem'],
            'magia': ['m√°gico', 'magia', 'encantado', 'feiti√ßo', 'poder'],
            'natureza': ['floresta', '√°rvore', 'animal', 'plantas', 'terra'],
            'espa√ßo': ['estrela', 'lua', 'planeta', 'nave', 'universo']
        };
        
        const foundThemes = [];
        const lowerText = text.toLowerCase();
        
        for (const [theme, keywords] of Object.entries(themeKeywords)) {
            if (keywords.some(keyword => lowerText.includes(keyword))) {
                foundThemes.push(theme);
            }
        }
        
        return foundThemes.length > 0 ? foundThemes : ['aventura'];
    }

    extractCharacters(text) {
        const characterKeywords = [
            'gato', 'cachorro', 'drag√£o', 'princesa', 'pr√≠ncipe', 'fada', 'bruxa',
            'gigante', 'an√£o', 'elfo', 'unic√≥rnio', 'sereia', 'p√°ssaro', 'urso',
            'coelho', 'raposa', 'lobo', 'le√£o', 'tigre', 'elefante', 'girafa'
        ];
        
        const lowerText = text.toLowerCase();
        const foundCharacters = characterKeywords.filter(char => 
            lowerText.includes(char)
        );
        
        return foundCharacters.length > 0 ? foundCharacters : ['amigo m√°gico'];
    }

    extractSetting(text) {
        const settingKeywords = {
            'floresta': ['floresta', 'mata', '√°rvores', 'bosque'],
            'castelo': ['castelo', 'pal√°cio', 'torre', 'fortaleza'],
            'espa√ßo': ['espa√ßo', 'estrelas', 'lua', 'planeta', 'universo'],
            'oceano': ['mar', 'oceano', 'praia', 'ilha', 'sereia'],
            'montanha': ['montanha', 'montanhas', 'pico', 'rocha'],
            'cidade': ['cidade', 'rua', 'casa', 'pr√©dio']
        };
        
        const lowerText = text.toLowerCase();
        
        for (const [setting, keywords] of Object.entries(settingKeywords)) {
            if (keywords.some(keyword => lowerText.includes(keyword))) {
                return setting;
            }
        }
        
        return 'mundo m√°gico';
    }

    generateStoryFromVoice(themes, characters, setting, originalText) {
        // Criar uma hist√≥ria baseada nos elementos extra√≠dos
        const mainCharacter = characters[0] || 'amigo m√°gico';
        const mainTheme = themes[0] || 'aventura';
        
        const storyTemplates = {
            'amizade': {
                title: `A Grande Amizade do ${mainCharacter.charAt(0).toUpperCase() + mainCharacter.slice(1)}`,
                paragraphs: [
                    `Era uma vez um ${mainCharacter} que vivia em um ${setting} muito especial.`,
                    `Um dia, ele encontrou um novo amigo que precisava de ajuda.`,
                    `Juntos, eles descobriram que a amizade √© a maior magia de todas!`,
                    `E desde ent√£o, eles viveram felizes para sempre, sempre ajudando uns aos outros.`
                ]
            },
            'coragem': {
                title: `O ${mainCharacter.charAt(0).toUpperCase() + mainCharacter.slice(1)} Corajoso`,
                paragraphs: [
                    `Havia um ${mainCharacter} que morava em um ${setting} misterioso.`,
                    `Ele sempre teve medo de enfrentar desafios, mas um dia decidiu ser corajoso.`,
                    `Com muito esfor√ßo e determina√ß√£o, ele superou todos os seus medos.`,
                    `Agora ele √© conhecido como o ${mainCharacter} mais corajoso de todos!`
                ]
            },
            'aventura': {
                title: `A Aventura M√°gica do ${mainCharacter.charAt(0).toUpperCase() + mainCharacter.slice(1)}`,
                paragraphs: [
                    `Em um ${setting} distante, vivia um ${mainCharacter} que sonhava com grandes aventuras.`,
                    `Um dia, ele partiu em uma jornada incr√≠vel cheia de surpresas.`,
                    `Pelo caminho, ele fez novos amigos e descobriu lugares m√°gicos.`,
                    `Quando voltou para casa, ele tinha hist√≥rias incr√≠veis para contar!`
                ]
            }
        };
        
        return storyTemplates[mainTheme] || storyTemplates['aventura'];
    }

    showLoadingScreen(message = 'Criando sua hist√≥ria m√°gica...') {
        this.showScreen('loading');
        document.getElementById('loading-title').textContent = message;
        
        // Atualizar mensagens de carregamento
        if (this.aiManager) {
            const loadingMessages = this.aiManager.getLoadingMessages();
            let currentMessageIndex = 0;
            
            const messageInterval = setInterval(() => {
                if (currentMessageIndex < loadingMessages.length) {
                    document.getElementById('loading-text').textContent = loadingMessages[currentMessageIndex];
                    currentMessageIndex++;
                } else {
                    clearInterval(messageInterval);
                }
            }, 2000);
        }
        
        // Simular processo de carregamento
        setTimeout(() => {
            this.showScreen('story');
        }, 5000);
    }

    loadStory() {
        const story = this.currentStory || storyData;
        
        // Carregar t√≠tulo da hist√≥ria
        document.getElementById('story-title').textContent = story.title;
        document.getElementById('preview-title').textContent = story.title;

        // Carregar fonte da hist√≥ria
        const storySource = document.getElementById('story-source');
        if (story.metadata && story.metadata.generatedBy) {
            storySource.textContent = story.metadata.generatedBy.toUpperCase();
        } else {
            storySource.textContent = 'EXEMPLO';
        }

        // Carregar par√°grafos da hist√≥ria
        const storyContainer = document.getElementById('story-paragraphs');
        storyContainer.innerHTML = '';

        const paragraphs = story.paragraphs || storyData.paragraphs;
        paragraphs.forEach(paragraph => {
            const p = document.createElement('p');
            p.textContent = typeof paragraph === 'string' ? paragraph : paragraph.text;
            storyContainer.appendChild(p);
        });
    }

    animateStoryElements() {
        // Animar elementos da hist√≥ria
        const storyElements = document.querySelectorAll('.story-illustration-large > div');
        storyElements.forEach((element, index) => {
            element.style.animationDelay = `${index * 0.5}s`;
        });
    }

    handleActionButton(button) {
        const buttonText = button.querySelector('.btn-text').textContent;
        
        switch(buttonText) {
            case 'Salvar Hist√≥ria':
                this.saveStory();
                break;
            case 'Compartilhar':
                this.shareStory();
                break;
            case 'Imprimir':
                this.printStory();
                break;
        }
    }

    saveStory() {
        // Simular salvamento
        this.showMessage('Salvando hist√≥ria... üíæ');
        
        setTimeout(() => {
            this.showMessage('Hist√≥ria salva com sucesso! üìÅ');
        }, 1500);
    }

    shareStory() {
        // Simular compartilhamento
        if (navigator.share) {
            const story = this.currentStory || storyData;
            const firstParagraph = typeof story.paragraphs[0] === 'string' ? 
                story.paragraphs[0] : story.paragraphs[0].text;
            
            navigator.share({
                title: story.title,
                text: firstParagraph,
                url: window.location.href
            }).catch(() => {
                this.showMessage('Compartilhamento n√£o dispon√≠vel neste dispositivo');
            });
        } else {
            this.showMessage('Copiando link para compartilhamento...');
            // Simular c√≥pia do link
            setTimeout(() => {
                this.showMessage('Link copiado! Cole em qualquer lugar para compartilhar üìã');
            }, 1500);
        }
    }

    printStory() {
        // Simular impress√£o
        this.showMessage('Preparando para impress√£o... üñ®Ô∏è');
        
        setTimeout(() => {
            const story = this.currentStory || storyData;
            const printWindow = window.open('', '_blank');
            const printContent = this.generatePrintContent(story);
            printWindow.document.write(printContent);
            printWindow.document.close();
            printWindow.print();
            this.showMessage('Hist√≥ria enviada para impress√£o!');
        }, 1000);
    }

    generateStoryContent(story) {
        const paragraphs = story.paragraphs || storyData.paragraphs;
        const text = paragraphs.map(p => typeof p === 'string' ? p : p.text).join('\n\n');
        return `${story.title}\n\n${text}`;
    }

    generatePrintContent(story) {
        const paragraphs = story.paragraphs || storyData.paragraphs;
        const text = paragraphs.map(p => `<p>${typeof p === 'string' ? p : p.text}</p>`).join('');
        
        return `
            <!DOCTYPE html>
            <html>
            <head>
                <title>${story.title}</title>
                <style>
                    body { 
                        font-family: 'Fredoka', Arial, sans-serif; 
                        line-height: 1.8; 
                        padding: 30px; 
                        max-width: 800px;
                        margin: 0 auto;
                        background: #f9f9f9;
                    }
                    .header {
                        text-align: center;
                        margin-bottom: 40px;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        border-radius: 15px;
                    }
                    h1 { 
                        color: #333; 
                        text-align: center; 
                        font-size: 2.5rem;
                        margin-bottom: 10px;
                    }
                    .subtitle {
                        font-size: 1.2rem;
                        opacity: 0.9;
                    }
                    p { 
                        margin-bottom: 20px; 
                        font-size: 1.3rem;
                        text-align: justify;
                        color: #333;
                    }
                    .footer {
                        text-align: center;
                        margin-top: 40px;
                        padding: 20px;
                        border-top: 2px solid #eee;
                        color: #666;
                    }
                    @media print {
                        body { background: white; }
                        .header { background: #667eea !important; }
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>${story.title}</h1>
                    <div class="subtitle">Uma hist√≥ria m√°gica do Criamundo</div>
                </div>
                ${text}
                <div class="footer">
                    <p>‚ú® Criado com amor pelo Criamundo ‚ú®</p>
                    <p>Para crian√ßas de 4 a 9 anos</p>
                </div>
            </body>
            </html>
        `;
    }

    downloadFile(content, filename, contentType) {
        const blob = new Blob([content], { type: contentType });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }

    getFallbackStory() {
        return {
            id: 'fallback-story',
            title: 'O Drag√£o Estelar e a Fada Azul',
            paragraphs: storyData.paragraphs,
            metadata: {
                createdAt: new Date().toISOString(),
                generatedBy: 'fallback',
                wordCount: 156
            }
        };
    }

    showMessage(message) {
        // Criar elemento de mensagem
        const messageElement = document.createElement('div');
        messageElement.className = 'message-popup';
        messageElement.textContent = message;
        messageElement.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 15px 25px;
            border-radius: 25px;
            font-size: 1rem;
            z-index: 1000;
            animation: slideDown 0.3s ease-out;
        `;

        document.body.appendChild(messageElement);

        // Remover mensagem ap√≥s 3 segundos
        setTimeout(() => {
            messageElement.style.animation = 'slideUp 0.3s ease-out';
            setTimeout(() => {
                if (messageElement.parentNode) {
                    messageElement.parentNode.removeChild(messageElement);
                }
            }, 300);
        }, 3000);
    }

    showShareScreen() {
        this.currentScreen = 'share';
        this.updateScreen();
        
        // Adicionar funcionalidade ao bot√£o "Criar Nova Hist√≥ria"
        setTimeout(() => {
            const newStoryBtn = document.getElementById('newStoryBtn');
            if (newStoryBtn) {
                newStoryBtn.addEventListener('click', () => {
                    this.showMainMenu();
                });
            }
        }, 100);
    }

    updateScreen() {
        // Esconder todas as telas
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => screen.style.display = 'none');
        
        // Mostrar a tela atual
        const currentScreenElement = document.getElementById(this.getScreenId());
        if (currentScreenElement) {
            currentScreenElement.style.display = 'block';
        }
    }

    getScreenId() {
        const screenMap = {
            'main': 'mainMenuScreen',
            'story': 'storyScreen',
            'share': 'shareScreen',
            'ai': 'aiCreationScreen',
            'voiceCapture': 'voiceCaptureScreen'
        };
        return screenMap[this.currentScreen] || 'mainMenuScreen';
    }

    showMainMenu() {
        this.currentScreen = 'main';
        this.updateScreen();
    }

    showStoryScreen() {
        this.currentScreen = 'story';
        this.updateScreen();
        this.loadStory();
    }

    showAICreationScreen() {
        this.currentScreen = 'ai';
        this.updateScreen();
    }

    generateStory() {
        const theme = document.getElementById('story-theme').value;
        const characters = document.getElementById('story-characters').value;
        const scenario = document.getElementById('story-scenario').value;

        if (!theme && !characters && !scenario) {
            this.showMessage('‚ùå Selecione pelo menos uma op√ß√£o');
            return;
        }
        
        const params = {};
        if (theme) params.tema = theme;
        if (characters) params.personagens = characters;
        if (scenario) params.cenario = scenario;

        this.showMessage('Criando hist√≥ria m√°gica com IA... ‚ú®');
        
        // Gerar hist√≥ria com IA
        this.aiManager.generateStory(params)
            .then(story => {
                this.currentStory = story;
                this.showStoryScreen();
                this.showMessage('Hist√≥ria criada com sucesso! üéâ');
            })
            .catch(error => {
                console.error('Erro ao gerar hist√≥ria:', error);
                this.showMessage('Usando hist√≥ria de exemplo... üìñ');
                this.currentStory = this.getFallbackStory();
                this.showStoryScreen();
            });
    }
}

// Anima√ß√µes CSS adicionais
const additionalStyles = `
    @keyframes slideDown {
        from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
        to { transform: translateX(-50%) translateY(0); opacity: 1; }
    }
    
    @keyframes slideUp {
        from { transform: translateX(-50%) translateY(0); opacity: 1; }
        to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
    }
`;

// Adicionar estilos ao documento
const styleSheet = document.createElement('style');
styleSheet.textContent = additionalStyles;
document.head.appendChild(styleSheet);

// Inicializar aplica√ß√£o quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', () => {
    new ScreenManager();
    
    // Adicionar efeitos de som (opcional)
    addSoundEffects();
});

// Efeitos de som simples
function addSoundEffects() {
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            // Simular som de clique (usando Web Audio API se dispon√≠vel)
            if (window.AudioContext || window.webkitAudioContext) {
                playClickSound();
            }
        });
    });
}

function playClickSound() {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
        // Silenciosamente ignorar erros de √°udio
    }
}

// Adicionar suporte para gestos de toque (swipe)
let touchStartX = 0;
let touchEndX = 0;

document.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
});

document.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
});

function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
            // Swipe para esquerda - pr√≥xima tela
            handleSwipeLeft();
        } else {
            // Swipe para direita - tela anterior
            handleSwipeRight();
        }
    }
}

function handleSwipeLeft() {
    const currentScreen = document.querySelector('.screen.active').id;
    
    switch(currentScreen) {
        case 'home-screen':
            document.getElementById('create-story-btn').click();
            break;
        case 'story-screen':
            document.getElementById('save-share-btn').click();
            break;
    }
}

function handleSwipeRight() {
    const currentScreen = document.querySelector('.screen.active').id;
    
    switch(currentScreen) {
        case 'story-screen':
            document.getElementById('back-btn').click();
            break;
        case 'save-share-screen':
            document.getElementById('back-to-story-btn').click();
            break;
        case 'voice-capture-screen':
            document.getElementById('back-from-voice-btn').click();
            break;
        case 'ai-config-screen':
            document.getElementById('back-from-ai-btn').click();
            break;
    }
}

// Adicionar suporte para teclas de navega√ß√£o
document.addEventListener('keydown', (e) => {
    switch(e.key) {
        case 'ArrowLeft':
            handleSwipeRight();
            break;
        case 'ArrowRight':
            handleSwipeLeft();
            break;
        case 'Escape':
            const currentScreen = document.querySelector('.screen.active').id;
            if (currentScreen !== 'home-screen') {
                const backBtn = document.querySelector(`#${currentScreen} .btn[class*="back"]`);
                if (backBtn) backBtn.click();
            }
            break;
    }
}); 